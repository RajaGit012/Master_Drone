#!/usr/bin/env python
PACKAGE = "spc_uav_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

uav_params = gen.add_group("UAV Parameters", type="collapse", state=False)
uav_params.add("mass",   	double_t, 0, "Mass",		  		              		  1.77, 0.00,  7.00)
uav_params.add("J_xx", 	double_t, 0, "Inertia Matrix xx", 	        			  0.0347563, 0.00,  0.9)
uav_params.add("J_yy", 	double_t, 0, "Inertia Matrix yy", 	        			  0.0458929, 0.00,  0.9)
uav_params.add("J_zz", 	double_t, 0, "Inertia Matrix zz", 	        			  0.0977, 0.00,  0.9)

impedance_params = gen.add_group("Impedance Controller", type="collapse", state=True)
impedance_params.add("track_end_effector", 	bool_t, 0, "End Effector Tracking Switch",  False)
impedance_params.add("K_v_x", 	double_t, 0, "Velocity Gain - x", 	        			  4.70, 0.00,  100.00)
impedance_params.add("K_v_y", 	double_t, 0, "Velocity Gain - y", 	        			  4.70, 0.00,  100.00)
impedance_params.add("K_v_z", 	double_t, 0, "Velocity Gain - z", 	        			  4.70, 0.00,  100.00)

impedance_params.add("K_w_x", 	double_t, 0, "Angular Rate Gain - x", 				      0.5, 0.00,  10.00)
impedance_params.add("K_w_y", 	double_t, 0, "Angular Rate Gain - y", 				      0.5, 0.00,  10.00)
impedance_params.add("K_w_z", 	double_t, 0, "Angular Rate Gain - z", 				      0.5, 0.00,  10.00)

impedance_params.add("c_KP_r_xx",double_t, 0, "Admittence filter Spring K_Pr Matrix xx",   3.0, 0.0,  100.0)
impedance_params.add("c_KP_r_yy",double_t, 0, "Admittence filter Spring K_Pr Matrix yy",   3.0, 0.0,  100.0)
impedance_params.add("c_KP_r_zz",double_t, 0, "Admittence filter Spring K_Pr Matrix zz",   3.0, 0.0,  100.0)
impedance_params.add("c_KP_t_xx",double_t, 0, "Admittence filter Spring K_Pt Matrix xx",   3.0, 0.0,  100.0)
impedance_params.add("c_KP_t_yy",double_t, 0, "Admittence filter Spring K_Pt Matrix yy",   3.0, 0.0,  100.0)
impedance_params.add("c_KP_t_zz",double_t, 0, "Admittence filter Spring K_Pt Matrix zz",   3.0, 0.0,  100.0)

onboard_px4_damp = gen.add_group("PX4 onboard damper", type="collapse", state=False)
onboard_px4_damp.add("K_w_x_px4",double_t, 0, "PX4 Onboard Angular Rate Gain - x", 		  0.2, 0.00,  1.00)
onboard_px4_damp.add("K_w_y_px4",double_t, 0, "PX4 Onboard Angular Rate Gain - y", 		  0.2, 0.00,  1.00)
onboard_px4_damp.add("K_w_z_px4",double_t, 0, "PX4 Onboard Angular Rate Gain - z", 		  0.3, 0.00,  1.00)

dis_obs_params = gen.add_group("Disturbance Observer", type="collapse", state=True)
dis_obs_params.add("enable_dist_obs", 	bool_t, 0, "Disturbance Observer Switch",  False)
dis_obs_params.add("K0_obs_t", 	double_t, 0, "Disturbance Observer Translational Gain 0", 0.0, 0.00,  50.00)
dis_obs_params.add("K0_obs_r", 	double_t, 0, "Disturbance Observer Rotational Gain 0", 	  0.0, 0.00,  50.00)

wrench_track_params = gen.add_group("Wrench Regulator", type="collapse", state=True)
wrench_track_params.add("enable_wrench_track", 	bool_t, 0, "Wrench Tracking Switch",  False)
wrench_track_params.add("W_cmd_fx", 	double_t, 0, "Commanded Interaction Wrench-force-x", 	  0.0, 0.00,  10.00)

wrench_track_params.add("Kp_w_tx", 	double_t, 0, "Wrench Regulator Proportional Gain Torque-x", 	  0.0, -1.00,  50.00)
wrench_track_params.add("Kp_w_ty", 	double_t, 0, "Wrench Regulator Proportional Gain Torque-y", 	  0.0, -1.00,  50.00)
wrench_track_params.add("Kp_w_tz", 	double_t, 0, "Wrench Regulator Proportional Gain Torque-z", 	  0.0, -1.00,  50.00)
wrench_track_params.add("Kp_w_fx", 	double_t, 0, "Wrench Regulator Proportional Gain Force-x", 	  0.0, -1.00,  50.00)
wrench_track_params.add("Kp_w_fy", 	double_t, 0, "Wrench Regulator Proportional Gain Force-y", 	  0.0, -1.00,  50.00)
wrench_track_params.add("Kp_w_fz", 	double_t, 0, "Wrench Regulator Proportional Gain Force-z", 	  0.0, -1.00,  50.00)


wrench_track_params.add("Ki_w_tx", 	double_t, 0, "Wrench Regulator Integral Gain Torque-x", 	  0.0, 0.00,  50.00)
wrench_track_params.add("Ki_w_ty", 	double_t, 0, "Wrench Regulator Integral Gain Torque-y", 	  0.0, 0.00,  50.00)
wrench_track_params.add("Ki_w_tz", 	double_t, 0, "Wrench Regulator Integral Gain Torque-z", 	  0.0, 0.00,  50.00)
wrench_track_params.add("Ki_w_fx", 	double_t, 0, "Wrench Regulator Integral Gain Force-x", 	  0.0, 0.00,  50.00)
wrench_track_params.add("Ki_w_fy", 	double_t, 0, "Wrench Regulator Integral Gain Force-y", 	  0.0, 0.00,  50.00)
wrench_track_params.add("Ki_w_fz", 	double_t, 0, "Wrench Regulator Integral Gain Force-z", 	  0.0, 0.00,  50.00)

etanks_params = gen.add_group("Energy Tanks", type="collapse", state=False)
etanks_params.add("enable_energy_tank", 	bool_t, 0, "Energy Tank Switch",  False)
etanks_params.add("T1_min", 	double_t, 0, "Energy Tank 1 - Minimum", 	  0.0, 0.00,  100.00)
etanks_params.add("T1_max", 	double_t, 0, "Energy Tank 1 - Maximum", 	  0.0, 0.00,  500.00)
etanks_params.add("T2_min", 	double_t, 0, "Energy Tank 2 - Minimum", 	  0.0, 0.00,  100.00)
etanks_params.add("T2_max", 	double_t, 0, "Energy Tank 2 - Maximum", 	  0.0, 0.00,  500.00)

learning_params = gen.add_group("Learning Impedance", type="collapse", state=False)
learning_params.add("cust_traj_stablzn_threshold", 	double_t, 0, "Custom trajectory stablization threshold", 	  0.0, 0.00,  1.00)
learning_params.add("cust_traj_stablzn_iterations", 	double_t, 0, "Custom trajectory stablization iterations", 	  0.0, 0.00,  500.00)

exit(gen.generate(PACKAGE, "spc_uav_control", "ET_Impedance_Control_Gains"))
